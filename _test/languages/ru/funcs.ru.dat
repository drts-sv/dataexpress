[groups]
Текст
Итоги
Математика
Дата
Прочее
Время
Доступ к БД
Записи
Падеж
Число прописью

[COUNT]
1
Возвращает число записей подчиненной формы или запроса.<br><br>
<center><code>COUNT(имя формы/запроса)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>
COUNT('Услуги')
</center></code><br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[SUM]
1
Вычисляет итоговую сумму по полю подчиненной формы или запроса.<br><br>
<center><code>SUM(имя формы, имя поля)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, имя поля - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>SUM('Услуги', 'Сумма')</code></center><br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[LENGTH]
0
Возвращает длину текста.<br><br>
<center><code>LENGTH(текст)</code></center><br><br>
<b>Параметры:</b> текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br><br> 
<center><code>LENGTH('Иванов')</code></center><br><br> 
Результат: 6.

[CUT]
0
Возвращает часть текста. Если "длина" превышает длину текста, текст будет вырезан до последнего символа.<br><br>
<center><code>CUT(текст, начало, длина)</code></center><br><br>
<b>Параметры:</b> текст, начало - число, длина - число<br>
<b>Результат:</b> текст<br><br>
<b>Пример:</b><br>
<center><code>CUT('Иванов', 4, 3)</code></center><br><br>
Результат: нов.

[FIND]
0
Возвращает начальную позицию искомого текста. Нумерация символов идет с единицы.<br><br>
<center><code>FIND(искомый текст, текст, начало)</code></center><br><br>
<b>Параметры:</b> искомый текст, текст, начало - число.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>FIND('мир', 'Привет, мир!!!', 1)</code></center><br><br>
Результат: 9.<br>

[REPLACE]
0
Заменяет найденную часть текста другим текстом.<br><br>
<center><code>REPLACE(текст, искомый текст, замещающий текст)</code></center><br><br>
<b>Параметры:</b> текст, искомый текст, замещающий текст.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>REPLACE('Привет, МИР!!!', 'МИР', 'ДРУГ')</code></center><br><br>
Результат: Привет, ДРУГ!!!

[REPLACEALL]
0
Заменяет все найденные части текста другим текстом.<br><br>
<center><code>REPLACEALL(текст, искомый текст, замещающий текст)</code></center><br><br>
<b>Параметры:</b> текст, искомый текст, замещающий текст.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>REPLACEALL('Привет, МИР!!!', '!', '?')</code></center><br><br>
Результат: Привет, МИР???

[UPPER]
0
Возвращает текст, все буквы которого прописные.<br><br>
<center><code>UPPER(текст)</code></center><br><br>
<b>Параметры:</b> текст.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>UPPER('Привет, Мир!!!')</code></center><br><br>
Результат: ПРИВЕТ, МИР!!!

[LOWER]
0
Возвращает текст, все буквы которого строчные.<br><br>
<center><code>LOWER(текст)</code></center><br><br>
<b>Параметры:</b> текст.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>LOWER('Привет, МИР!!!')</code></center><br><br>
Результат: привет, мир!!!

[TOWORDS]
9
Возвращает число прописью. Дробная часть игнорируется.<br><br>
<center><code>TOWORDS(число)</code></center><br><br>
<b>Параметры:</b> число.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>TOWORDS(1823)</code></center><br><br>
Результат: одна тысяча восемьсот двадцать три

[RURTOWORDS]
9
Возвращает число прописью в рублях.<br><br>
<center><code>RURTOWORDS(число)</code></center><br><br>
<b>Параметры:</b> число.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>RURTOWORDS(1823.23)</code></center><br><br>
Результат: одна тысяча восемьсот двадцать три рубля 23 копейки

[FUPPER]
0
Возвращает текст, все буквы которого строчные, а первая прописная.<br><br>
<center><code>FUPPER(текст)</code></center><br><br>
<b>Параметры:</b> текст.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>FUPPER('ПРИВЕТ, Мир!!!')</code></center><br><br>
Результат: Привет, мир!!!

[ROUND]
2
Возвращает число, округленное до указанных знаков. Число округляется по математическим правилам.<br><br>
<center><code>ROUND(число, число знаков после запятой)</code></center><br><br>
<b>Параметры:</b> число, число знаков после запятой.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>ROUND(234.69, 1)</code></center><br><br>
Результат: 234.7

[TRUNC]
2
Возвращает целую часть числа.<br><br>
<center><code>TRUNC(число)</code></center><br><br>
<b>Параметры:</b> число.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>TRUNC(234.69)</code></center><br><br>
Результат: 234

[FRAC]
2
Возвращает дробную часть.<br><br>
<center><code>FRAC(число, знаков)</code></center><br><br>
<b>Параметры:</b> число, знаков - число знаков после запятой.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>FRAC(234.6932, 2)</code></center><br><br>
Результат: 69

[POWER]
2
Возвращает степень числа.<br><br>
<center><code>POWER(число, степень)</code></center><br><br>
<b>Параметры:</b> число, степень - число.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>POWER(2, 3)</code></center><br><br>
Результат: 8

[DATE]
3
Возвращает текущую дату.<br><br>
<center><code>DATE</code></center><br><br>
<b>Параметры:</b> нет.<br>
<b>Результат:</b> дата.<br><br>

[TIME]
5
Возвращает текущее время.<br><br>
<center><code>TIME</code></center><br><br>
<b>Параметры:</b> нет.<br>
<b>Результат:</b> время.<br><br>

[YEARSBETWEEN]
3
Определяет интервал между датами в годах.<br><br>
<center><code>YEARSBETWEEN(дата1, дата2)</code></center><br><br>
<b>Параметры:</b> дата1, дата2.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>YEARSBETWEEN([Начальная дата], [Конечная дата])</code></center><br><br>
Если поля, указанные в примере, будут равны соответственно значениям 10.08.2008 и 02.02.2019, то результат будет равен 10. Не имеет значения в каком порядке указаны даты, т. е. первой может идти конечная дата, а затем начальная:<br><br>
<center><code>YEARSBETWEEN([Конечная дата], [Начальная дата])</code></center>

[MONTHSBETWEEN]
3
Определяет интервал между датами в месяцах.<br><br>
<center><code>MONTHSBETWEEN(дата1, дата2)</code></center><br><br>
<b>Параметры:</b> дата1, дата2.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>MONTHSBETWEEN([Начальная дата], [Конечная дата])</code></center><br><br>
Если поля, указанные в примере, будут равны соответственно значениям 10.08.2018 и 02.02.2019, то результат будет равен 5. 
Не имеет значения в каком порядке указаны даты, т. е. первой может идти конечная дата, а затем начальная:<br><br>
<center><code>MONTHSBETWEEN([Конечная дата], [Начальная дата])</code></center>

[DAYSBETWEEN]
3
Определяет интервал между датами в днях.<br><br>
<center><code>DAYSBETWEEN(дата1, дата2)</code></center><br><br>
<b>Параметры:</b> дата1, дата2.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>DAYSBETWEEN([Начальная дата], [Конечная дата])</code></center><br><br>
Если поля, указанные в примере, будут равны соответственно значениям 10.01.2019 и 02.02.2019, то результат будет равен 23. 
Не имеет значения в каком порядке указаны даты, т. е. первой может идти конечная дата, а затем начальная:<br><br>
<center><code>DAYSBETWEEN([Конечная дата], [Начальная дата])</code></center>

[DAYOF]
3
Извлекает из даты номер дня.<br><br>
<center><code>DAYOF(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>DAYOF(CDATE('23.12.15'))</code></center><br><br>
Результат: 23

[MONTHOF]
3
Извлекает из даты номер месяца.<br><br>
<center><code>MONTHOF(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>MONTHOF(CDATE('23.12.15'))</code></center><br><br>
Результат: 12

[YEAROF]
3
Извлекает из даты номер года.<br><br>
<center><code>YEAROF(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>YEAROF(CDATE('23.12.15'))</code></center><br><br>
Результат: 2015

[WEEKOF]
3
Извлекает из даты номер недели в году.<br><br>
<center><code>WEEKOF(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>WEEKOF(CDATE('23.12.15'))</code></center><br><br>
Результат: 52

[WEEKDAY]
3
Определяет по дате название дня недели.<br><br>
<center><code>WEEKDAY(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>WEEKDAY(CDATE('23.12.15'))</code></center><br><br>
Результат: Среда

[WEEKDAYBRIEF]
3
Определяет по дате краткое название дня недели.<br><br>
<center><code>WEEKDAYBRIEF</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>WEEKDAYBRIEF(CDATE('23.12.15'))</code></center><br><br>
Результат: Ср

[MONTH]
3
Определяет по дате название месяца.<br><br>
<center><code>MONTH(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>MONTH(CDATE('23.12.15'))</code></center><br><br>
Результат: Декабрь

[MONTHBRIEF]
3
Определяет по дате краткое название месяца.<br><br>
<center><code>MONTHBRIEF</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>MONTHBRIEF(CDATE('23.12.15'))</code></center><br><br>
Результат: Дек

[NULL]
4
Неопределенное значение или пусто.<br><br>
<center><code>NULL</code></center><br><br>
<b>Параметры:</b> нет.<br>
<b>Результат:</b> неопределенное значение NULL.<br><br>
Функция часто используется для очистки поля и в функции IIF для проверки заполнения поля. Пример выражения в проверке значения:<br><br>
<center><code>IIF([Клиент]=NULL, 'Клиент не выбран', '')</code></center>

[IIF]
4
Функция возвращает результат в зависимости от условия. Если условие выполняется, функция возвращает значение1, иначе значение2.<br><br>
<center><code>IIF(условие, значение1, значение2)</code></center><br><br>
<b>Параметры:</b> Условие - логическое, Значение 1 - любой тип, Значени 2 - любой тип.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>IIF([Сумма] > 0, [Сумма], '-')</code></center><br><br>
Первый параметр функции является логическим выражением, результатом которого должно быть значение ИСТИНА или ЛОЖЬ (соответствующие им функции не предусмотрены). Если результат выражения равен ИСТИНА, то функция вернет значение второго параметра, если результат равен ЛОЖЬ, то функция вернет значение третьего параметра. По сути функция является способом создавать ветвления в цепочке вычислений. Вы можете создавать вложенные IIF:<br><br>
<center><code>IIF([Цвет]='Красный' & [Фигура]='Квадрат', SUM('Красные квадраты', 'Сумма'), IIF([Цвет]='Желтый' & [Фигура]='Круг', SUM('Желтые круги', 'Сумма'), SUM('Зеленые фонарики', 'Сумма')))

[DAYOFWEEK]
3
Извлекает из даты номер дня недели.<br><br>
<center><code>DAYOFWEEK(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>DAYOFWEEK(CDATE('23.12.15'))</code></center><br><br>
Результат: 3

[RECNO]
7
Определяет номер текущей записи формы или запроса.<br><br>
<center><code>RECNO(имя формы/запроса)</code></center><br><br>
Параметр: имя формы/запроса - текст.<br><br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>RECNO('Страны')</code></center>

[SUMIF]
1
Вычисляет итоговую сумму по полю подчиненной формы или запроса.<br><br>
<center><code>SUMIF(имя формы/запроса, имя поля, условие)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, имя поля - текст, условие - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>SUMIF('Услуги', 'Сумма', '[выполнено]=1')</code></center><br><br>
Третий параметр представляет собой логическое выражение, которое вычисляется в контексте формы (запроса), указанной в первом параметре. Для подсчета суммы функция проходит по всем записям и для каждой записи проверяет условие: если условие выполняется функция считает запись, иначе пропускает. Даже если ни одна запись не удовлетворяет условию, функция вернет 0.<br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[COUNTIF]
1
Возвращает число записей в подчиненной форме или запросе.<br><br>
<center><code>COUNTIF(имя формы/запроса, условие)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, условие - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>COUNTIF('Услуги', '[выполнено]=1')</code></center><br><br>
Третий параметр представляет собой логическое выражение, которое вычисляется в контексте формы (запроса), указанной в первом параметре. Для подсчета количества функция проходит по всем записям и для каждой записи проверяет условие: если условие выполняется функция считает запись, иначе пропускает.<br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[ROUNDTO]
0
Округляет число до указанных знаков, дополняя нулями. Число округляется по математическим правилам.<br><br>
<center><code>ROUNDTO(число, число знаков после запятой)</code></center><br><br>
<b>Параметры:</b> число, точность - число.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>ROUNDTO(234.69, 2)</code></center><br><br>
Результат: 234.70

[MAX]
1
Возвращает максимальное значение поля подчиненной формы или запроса.<br><br>
<center><code>MAX(имя формы/запроса, имя поля)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, имя поля - текст.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>MAX('Услуги', 'Цена')</code></center><br><br>
Функция игнорирует поля со значением NULL. Если все поля содержат NULL, то функция также вернет NULL.<br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[MAXIF]
1
Вычисляет максимальное значение поля подчиненной формы или запроса среди записей, удовлетворяющих условию.<br><br>
<center><code>MAXIF(имя формы/запроса, имя поля, условие)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, имя поля - текст, условие - текст.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>MAXIF('Услуги', 'Цена', '[выполнено]=1')</code></center><br><br>
Функция игнорирует поля со значением NULL. Если все поля содержат NULL, то функция также вернет NULL.<br><br>
Третий параметр представляет собой логическое выражение, которое вычисляется в контексте формы (запроса), указанной в первом параметре. Для определения максимального значения функция проходит по всем записям и для каждой записи проверяет условие: если условие выполняется функция считает запись, иначе пропускает.<br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[MIN]
1
Вычисляет минимальное значение поля подчиненной формы или запроса.<br><br>
<center><code>MIN(имя формы/запроса, имя поля)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, имя поля - текст.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>MIN('Услуги', 'Цена')</code></center><br><br>
Функция игнорирует поля со значением NULL. Если все поля содержат NULL, то функция также вернет NULL.<br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[MINIF]
1
Вычисляет минимальное значение поля подчиненной формы или запроса среди записей, удовлетворяющих условию.<br><br>
<center><code>MINIF(имя формы/запроса, имя поля, условие)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, имя поля - текст, условие - текст.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>MINIF('Услуги', 'Цена', '[выполнено]=1')</code></center><br><br>
Функция игнорирует поля со значением NULL. Если все поля содержат NULL, то функция также вернет NULL.<br><br>
Третий параметр представляет собой логическое выражение, которое вычисляется в контексте формы (запроса), указанной в первом параметре. Для определения минимального значения функция проходит по всем записям и для каждой записи проверяет условие: если условие выполняется функция считает запись, иначе пропускает.<br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[AVG]
1
Вычисляет среднее значение поля подчиненной формы или запроса.<br><br>
<center><code>AVG(имя формы/запроса, имя поля)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, имя поля - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>AVG('Услуги', 'Цена')</code></center><br><br>
Функция игнорирует поля со значением NULL. Если все поля содержат NULL, то функция вернет 0.<br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[AVGIF]
1
Вычисляет среднее значение поля подчиненной формы или запроса среди записей, удовлетворяющих условию.<br><br>
<center><code>AVGIF(имя формы/запроса, имя поля, условие)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, имя поля - текст, условие - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>AVGIF('Услуги', 'Цена', '[выполнено]=1')</code></center><br><br>
Функция игнорирует поля со значением NULL. Если все поля содержат NULL, то функция вернет 0.<br><br>
Третий параметр представляет собой логическое выражение, которое вычисляется в контексте формы (запроса), указанной в первом параметре. Для определения среднего значения функция проходит по всем записям и для каждой записи проверяет условие: если условие выполняется функция считает запись, иначе пропускает.<br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[CSTR]
4
Преобразует значение (число, дату, время) в текст.<br><br>
<center><code>CSTR(значение)</code></center><br><br>
<b>Параметры:</b> значение - число, дата, время.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>'Текущая дата: ' + CSTR([дата])</code></center><br><br>
Если значение равно NULL, то функция вернет пустой текст: CSTR(NULL) = ''.

[CNUM]
4
Преобразует текст в число.<br><br>
<center><code>CNUM(текст)</code></center><br><br>
<b>Параметры:</b> текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>[цена] * CNUM('30')</code></center><br><br>
Для корректного преобразования число должно быть представлено согласно региональным настройкам системы.

[CDATE]
4
Преобразует текст в дату.<br><br>
<center><code>CDATE(текст)</code></center><br><br>
<b>Параметры:</b> текст.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>MONTHSBETWEEN([дата], CDATE('12.10.2013'))</code></center><br><br>
Для корректного преобразования дата должна быть представлена согласно региональным настройкам системы.

[ADDDAY]
3
Прибавляет/вычитает из даты указанное количество дней.<br><br>
<center><code>ADDDAY(дата, число)</code></center><br><br>
<b>Параметры:</b> дата, число.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>ADDDAY([дата], 8)<br>ADDDAY([дата], -3)</code></center><br><br>
Если второй параметр меньше нуля, то функция вычитает дни из даты.

[ADDWEEK]
3
Прибавляет/вычитает из даты указанное количество недель.<br><br>
<center><code>ADDWEEK(дата, число)</code></center><br><br>
<b>Параметры:</b> дата, число.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>ADDWEEK([дата], 8)<br>ADDWEEK([дата], -3)</code></center><br><br>
Если второй параметр меньше нуля, то функция вычитает недели из даты.

[ADDMONTH]
3
Прибавляет/вычитает из даты указанное количество месяцев.<br><br>
<center><code>ADDMONTH(дата, число)</code></center><br><br>
<b>Параметры:</b> дата, число.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>ADDMONTH([дата], 8)<br>ADDMONTH([дата], -3)</code></center><br><br>
Если второй параметр меньше нуля, то функция вычитает месяцы из даты.

[ADDYEAR]
3
Прибавляет/вычитает из даты указанное количество лет.<br><br>
<center><code>ADDYEAR(дата, число)</code></center><br><br>
<b>Параметры:</b> дата, число.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>ADDYEAR([дата], 8)<br>ADDYEAR([дата], -3)</code></center><br><br>
Если второй параметр меньше нуля, то функция вычитает годы из даты.

[CTIME]
4
Преобразует текст в время.<br><br>
<center><code>CTIME(текст)</code></center><br><br>
<b>Параметры:</b> текст.<br>
<b>Результат:</b> время.<br><br>
<b>Пример:</b><br>
<center><code>CTIME('8:34')</code></center><br><br>
Для корректного преобразования время должно быть представлено согласно региональным настройкам системы.

[HOUROF]
5
Извлекает из времени количество часов.<br><br>
<center><code>HOUROF(время)</code></center><br><br>
<b>Параметры:</b> время.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>HOUROF([время])</code></center><br><br>
Если [время] = 08:23, функция вернет 8.

[MINUTEOF]
5
Извлекает из времени количество минут.<br><br>
<center><code>MINUTEOF(время)</code></center><br><br>
<b>Параметры:</b> время.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>MINUTEOF([время])</code></center><br><br>
Если [время] = 08:23, функция вернет 23.

[SECONDOF]
5
Извлекает из времени количество секунд.<br><br>
<center><code>SECONDOF(время)</code></center><br><br>
<b>Параметры:</b> время.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>SECONDOF([время])</code></center><br><br>
Если [время] = 08:23:56, функция вернет 56.

[HOURSBETWEEN]
5
Возвращает временной интервал в часах.<br><br>
<center><code>HOURSBETWEEN(дата1, время1, дата2, время2)</code></center><br><br>
<b>Параметры:</b> дата1, время1, дата2, время2.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>HOURSBETWEEN([Начальная дата], [начальное время], [Конечная дата], [Конечное время])</code></center><br><br>
Если нужно узнать интервал между полями времени, без использования дат, можно написать выражение так:<br><br>
<center><code>HOURSBETWEEN(date, [начальное время], date, [конечное время])</code></center>

[MINUTESBETWEEN]
5
Возвращает временной интервал в минутах.<br><br>
<center><code>MINUTESBETWEEN(дата1, время1, дата2, время2)</code></center><br><br>
<b>Параметры:</b> дата1, время1, дата2, время2.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>MINUTESBETWEEN([Начальная дата], [начальное время], [Конечная дата], [Конечное время])</code></center><br><br>
Если нужно узнать интервал между полями времени, без использования дат, можно написать выражение так:<br><br>
<center><code>MINUTESBETWEEN(date, [начальное время], date, [конечное время])</code></center>

[SECONDSBETWEEN]
5
Возвращает временной интервал в секундах.<br><br>
<center><code>SECONDBETWEEN(дата1, время1, дата2, время2)</code></center><br><br>
<b>Параметры:</b> дата1, время1, дата2, время2.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>SECONDSBETWEEN([Начальная дата], [начальное время], [Конечная дата], [Конечное время])</code></center><br><br>
Если нужно узнать интервал между полями времени, без использования дат, можно написать выражение так:<br><br>
<center><code>SECONDSBETWEEN(date, [начальное время], date, [конечное время])</code></center>

[ADDHOUR]
5
Прибавляет/вычитает количество часов из времени.<br><br>
<center><code>ADDHOUR(дата, время, число, имя поля даты)</code></center><br><br>
<b>Параметры:</b> дата, время, число, поле даты - текст.<br>
<b>Результат:</b> время.<br><br>
<b>Пример:</b><br>
<center><code>ADDHOUR([начальная дата], [начальное время], 2, 'конечная дата')</code></center><br><br>
Кроме того, что функция вычисляет время, она изменяет поле даты, указанное в четвертом параметре. Если, например "начальное время" = 23:00, увеличиваем на 2 часа, "начальная дата" = 23.01.2015, то в результате "конечное время" = 01:00, "конечная дата" = 24.01.2015.<br><br>
Четвертый параметр может быть пустым, а первый параметр, в этом случае, любой датой:
<center><code>ADDHOUR(date, [начальное время], 2, '')</code></center><br><br>
Если третий параметр меньше нуля, то функция вычитает часы из времени.

[ADDMINUTE]
5
Прибавляет/вычитает количество минут из времени.<br><br>
<center><code>ADDMINUTE(дата, время, число, имя поля даты)</code></center><br><br>
<b>Параметры:</b> дата, время, число, поле даты - текст.<br>
<b>Результат:</b> время.<br><br>
<b>Пример:</b><br>
<center><code>ADDMINUTE([начальная дата], [начальное время], 120, 'конечная дата')</code></center><br><br>
Кроме того, что функция вычисляет время, она изменяет поле даты, указанное в четвертом параметре. Если, например "начальное время" = 23:00, увеличиваем на 120 минут, "начальная дата" = 23.01.2015, то в результате "конечное время" = 01:00, "конечная дата" = 24.01.2015.<br><br>
Четвертый параметр может быть пустым, а первый параметр, в этом случае, любой датой:
<center><code>ADDMINUTE(date, [начальное время], 2, '')</code></center><br><br>
Если третий параметр меньше нуля, то функция вычитает минуты из времени.

[ADDSECOND]
5
Прибавляет/вычитает количество секунд из времени.<br><br>
<center><code>ADDSECOND(дата, время, число, имя поля даты)</code></center><br><br>
<b>Параметры:</b> дата, время, число, поле даты - текст.<br>
<b>Результат:</b> время.<br><br>
<b>Пример:</b><br>
<center><code>ADDSECOND([начальная дата], [начальное время], 120, 'конечная дата')</code></center><br><br>
Кроме того, что функция вычисляет время, она изменяет поле даты, указанное в четвертом параметре. Если, например "начальное время" = 23:59, увеличиваем на 120 секунд, "начальная дата" = 23.01.2015, то в результате "конечное время" = 00:01, "конечная дата" = 24.01.2015.<br><br>
Четвертый параметр может быть пустым, а первый параметр, в этом случае, любой датой:
<center><code>ADDSECOND(date, [начальное время], 2, '')</code></center><br><br>
Если третий параметр меньше нуля, то функция вычитает секунды из времени.

[PERIOD]
3
Рассчитывает трудовой стаж.<br><br>
<center><code>PERIOD(дата1, дата2, формат)</code></center><br><br>
<b>Параметры:</b> дата1, дата2, формат - число.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>PERIOD([начальная дата], [конечная дата], 3)</code></center><br><br>
Функция вернет, например: 7 лет 9 месяцев 21 день. Третий параметр задает формат вывода: 1 - только год, 2 - год и месяц, 3 - день, месяц, год. Если какой-либо элемент равен 0, то он не отображается. При расчетах считается, что в месяце 30 дней. Порядок дат значения не имеет, т. е. в первом параметре может быть указана конечная дата, а во втором начальная.

[FDATE]
3
Возвращает дату в формате "1 января 2009".<br><br>
<center><code>FDATE(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>FDATE([дата])</code></center>

[NZ]
4
Возвращает второй параметр, если первый равен NULL.<br><br>
<center><code>NZ(значение1, значение2)</code></center><br><br>
<b>Параметры:</b> любой тип, любой тип.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>NZ([дата], "Дата не указана")</code></center><br><br>
Функция вернет "дата не указана", если [дата]=NULL, иначе само значение [дата]. Является сокращенным вариантом IIF:<br><br>
<center><code>IIF([дата]=NULL, "Дата не указана", [дата])</code></center><br><br>

[INDEXOF]
0
Возвращает подстроку с индексом N.<br><br>
<center><code>INDEXOF(индекс, текст)</code></center><br><br>
<b>Параметры:</b> индекс - число, текст.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>INDEXOF(4, "ноль;один;два;три;четыре;пять")</code></center><br><br>
Функция вернет "четыре". Индекс начинается с нуля.

[MERGE]
1
Объединяет в одну строку значения столбца подчиненной формы или запроса.<br><br>
<center><code>MERGE(имя формы/запроса, имя поля, разделитель)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, имя поля - текст, разделитель - текст.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>MERGE('Неисправности', 'Неисправность', ', ')</code></center><br><br>
В качестве поля можно использовать и объекты. В этом случае будет использовано поле объекта, которое отображается в списке. Даже если в форме или запросе нет ни одной записи функция вернет пустую строку: ''.<br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[RECID]
7
Возвращает идентификатор записи (первичный ключ) формы/запроса.<br><br>
<center><code>RECID(имя формы/запроса)</code></center><br><br>
<b>Параметры:</b> имя формы - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>RECID('клиенты')</code></center><br><br>
Часто используется в фильтре источника для создания подчиненных запросов.

[OBJID]
6
Возвращает идентификатор (первичный ключ) объекта.<br><br>
<center><code>OBJID(имя формы, имя поля, значение поля)</code></center><br><br>
<b>Параметры:</b> имя формы - текст, имя поля - текст, значение поля - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>OBJID('клиенты', 'название', 'Иванов И. И.')</code></center><br><br>
Часто используется в фильтре списка и запроса, в значении по умолчанию объектов.

[USER]
4
Возвращает имя текущего пользователя.<br><br>
<center><code>USER</code></center><br><br>
<b>Параметры:</b> нет.<br>
<b>Результат:</b> текст.<br><br>

[ROLE]
4
Возвращает название роли текущего пользователя.<br><br>
<center><code>ROLE</code></center><br><br>
<b>Параметры:</b> нет.<br>
<b>Результат:</b> текст.<br><br>

[DBSUM]
6
Вычисляет сумму по полю формы.<br><br>
<center><code>DBSUM(имя формы, имя поля, фильтр)</code></center><br><br>
<b>Параметры:</b> имя формы - текст, имя поля - текст, фильтр - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>DBSUM('Продажи', 'Сумма', '[!дата]<=[дата]')</code></center><br><br>
В вычисления входят только те записи, которые удовлетворяют условиям фильтра. Синтаксис фильтра такой же как в <a href="https://wiki.mydataexpress.ru/rukovodstvo_po_polzovaniu_dx:otchjot#filtr_istochnika">фильтре источника</a>. Функцию можно применять к любой форме базы данных. Функция всегда возвращает число - даже если в фильтр не попадают записи, возвращается 0. При вычислении суммы, поля со значением NULL игнорируются.<br><br>
В отличии от функции SUM, которая суммирует значения в наборе данных, функция DBSUM обращается напрямую к базе данных (функция является полным аналогом итоговой функции "Сумма" в отборе запроса). В связи с этим результат функций DBSUM и SUM может отличаться. Если вам надо вычислить сумму в подчиненной форме в пределах всей базы, используйте DBSUM, если в пределах одной текущей редактируемой родительской записи - функцию SUM.

[DBAVG]
6
Вычисляет среднее арифметическое по полю формы.<br><br>
<center><code>DBAVG(имя формы, имя поля, фильтр)</code></center><br><br>
<b>Параметры:</b> имя формы - текст, имя поля - текст, фильтр - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>DBAVG('Продажи', 'Сумма', '[!дата]<=[дата]')</code></center><br><br>
В вычисления входят только те записи, которые удовлетворяют условиям фильтра. Синтаксис фильтра такой же как в <a href="https://wiki.mydataexpress.ru/rukovodstvo_po_polzovaniu_dx:otchjot#filtr_istochnika">фильтре источника</a>. Функцию можно применять к любой форме базы данных. Функция всегда возвращает число - даже если в фильтр не попадают записи, возвращается 0. При вычислении среднего, поля со значением NULL игнорируются.<br><br>
В отличии от функции AVG, которая вычисляет среднее значение в наборе данных, функция DBAVG обращается напрямую к базе данных (функция является полным аналогом итоговой функции "Среднее" в отборе запроса). В связи с этим результат функций DBAVG и AVG может отличаться. Если вам надо вычислить среднее в подчиненной форме в пределах всей базы, используйте DBAVG, если в пределах одной текущей редактируемой родительской записи - функцию AVG.

[DBMAX]
6
Вычисляет максимальное значение по полю формы.<br><br>
<center><code>DBMAX(имя формы, имя поля, фильтр)</code></center><br><br>
<b>Параметры:</b> имя формы - текст, имя поля - текст, фильтр - текст.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>DBMAX('Продажи', 'Сумма', '[!дата]<=[дата]')</code></center><br><br>
В вычисления входят только те записи, которые удовлетворяют условиям фильтра. Синтаксис фильтра такой же как в <a href="https://wiki.mydataexpress.ru/rukovodstvo_po_polzovaniu_dx:otchjot#filtr_istochnika">фильтре источника</a>. Функцию можно применять к любой форме базы данных. Если в фильтр не попадают записи или одно из значений содержит NULL, возвращается NULL.<br><br>
В отличии от функции MAX, которая ищет максимальное в наборе данных, функция DBMAX обращается напрямую к базе данных (функция является полным аналогом итоговой функции "Максимальное" в отборе запроса). В связи с этим результат функций DBMAX и MAX может отличаться. Если вам надо найти максимальное значение в подчиненной форме в пределах всей базы, используйте DBMAX, если в пределах одной текущей редактируемой родительской записи - функцию MAX. 

[DBMIN]
6
Вычисляет минимальное значение поля.<br><br>
<center><code>DBMIN(имя формы, имя поля, фильтр)</code></center><br><br>
<b>Параметры:</b> имя формы - текст, имя поля - текст, фильтр - текст.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>DBMIN('Продажи', 'Сумма', '[!дата]<=[дата]')</code></center><br><br>
В вычисления входят только те записи, которые удовлетворяют условиям фильтра. Синтаксис фильтра такой же как в <a href="https://wiki.mydataexpress.ru/rukovodstvo_po_polzovaniu_dx:otchjot#filtr_istochnika">фильтре источника</a>. Функцию можно применять к любой форме базы данных. Если в фильтр не попадают записи или одно из значений содержит NULL, возвращается NULL.<br><br>
В отличии от функции MIN, которая ищет минимальное в наборе данных, функция DBMIN обращается напрямую к базе данных (функция является полным аналогом итоговой функции "Минимальное" в отборе запроса). В связи с этим результат функций DBMIN и MIN может отличаться. Если вам надо найти максимальное значение в подчиненной форме в пределах всей базы, используйте DBMIN, если в пределах одной текущей редактируемой родительской записи - функцию MIN.

[DBCOUNT]
6
Вычисляет количество записей в форме.<br><br>
<center><code>DBCOUNT(имя формы, фильтр)</code></center><br><br>
<b>Параметры:</b> имя формы - текст, фильтр - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>DBCOUNT('Продажи', '[!дата]<=[дата]')</code></center><br><br>
В вычисления входят только те записи, которые удовлетворяют условиям фильтра. Синтаксис фильтра такой же как в <a href="https://wiki.mydataexpress.ru/rukovodstvo_po_polzovaniu_dx:otchjot#filtr_istochnika">фильтре источника</a>. Функцию можно применять к любой форме базы данных.<br><br>
В отличии от функции COUNT, которая возвращает количество записей в наборе данных, функция DBCOUNT обращается напрямую к базе данных (функция является полным аналогом итоговой функции "Количество" в отборе запроса). В связи с этим результат функций DBCOUNT и COUNT может отличаться. Если вам надо найти количество записей в подчиненной форме в пределах всей базы, используйте DBCOUNT, если в пределах одной текущей редактируемой родительской записи - функцию COUNT.

[DBGET]
6
Возвращает значение поля формы.<br><br>
<center><code>DBGET(имя формы, имя поля, фильтр)</code></center><br><br>
<b>Параметры:</b> имя формы - текст, имя поля - текст, фильтр - текст.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>DBGET('Продажи', 'Сумма', '[!дата]=[дата]')</code></center><br><br>
В базе данных может быть несколько записей, удовлетворяющих фильтру, функция берет первую запись. Синтаксис фильтра такой же как в <a href="https://wiki.mydataexpress.ru/rukovodstvo_po_polzovaniu_dx:otchjot#filtr_istochnika">фильтре источника</a>. Функцию можно применять к любой форме базы данных.

[DBGETID]
6
Возвращает идентификатор записи формы.<br><br>
<center><code>DBGETID(имя формы, фильтр)</code></center><br><br>
<b>Параметры:</b> имя формы - текст, фильтр - текст.<br>
<b>Результат:</b> число или NULL (любой тип).<br><br>
<b>Пример:</b><br>
<center><code>DBGETID('Продажи', '[!дата]=[дата]')</code></center><br><br>
В базе данных может быть несколько записей, удовлетворяющих фильтру. Функция берет первую запись. Синтаксис фильтра такой же как в <a href="https://wiki.mydataexpress.ru/rukovodstvo_po_polzovaniu_dx:otchjot#filtr_istochnika">фильтре источника</a>. Функцию можно применять к любой форме базы данных.

[DBGETBYID]
6
Возвращает значение поля записи с указанным идентификатором (ID).<br><br>
<center><code>DBGETBYID(имя формы, имя поля, идентификатор)</code></center><br><br>
<b>Параметры:</b> имя формы - текст, имя поля - текст, идентификатор - число.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>DBGETBYID('Услуги', 'Название', DBGETID(...))</code></center><br><br>
Идентификатор записи однозначно определяет запись в базе данных. Есть несколько способов получить идентификатор: функции RECID, DBGETID, OBJID, поле типа "объект".

[MINV]
2
Возвращает минимальное значение.<br><br>
<center><code>MINV(значение1, значение2, ..., значениеN)</code></center><br><br>
<b>Параметры:</b> значение - любой тип<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>MINV([цена1], [цена2], [цена3])</code></center>

[MAXV]
2
Возвращает максимальное значение.<br><br>
<center><code>MAXV(значение1, значение2, ..., значениеN)</code></center><br><br>
<b>Параметры:</b> значение1 - любой тип, значение2, ..., значениеN.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>MAXV([цена1], [цена2], [цена3])</code></center>

[SETVAR]
4
Сохраняет значение в переменную.<br><br>
<center><code>SETVAR(имя переменной, значение)</code></center><br><br>
<b>Параметры:</b> имя переменной - текст, значение - любой тип.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>SETVAR('Моя переменная', LENGTH([текст])</code></center><br><br>
Имя переменной может содержать любые символы, не зависит от регистра. Функция возвращает значение второго параметра. Переменная является глобальной, т. е. доступна из любой формы или отчета.

[GETVAR]
4
Возвращает значение переменной.<br><br>
<center><code>GETVAR(имя переменной)</code></center><br><br>
<b>Параметры:</b> имя переменной - текст.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>GETVAR('Моя переменная')</code></center><br><br>
Имя переменной может содержать любые символы, не зависит от регистра. Переменная является глобальной, т. е. доступна из любой формы или отчета. Если переменная не найдена, то функция возвращает null.

[IFZ]
4
Возвращает второй параметр, если первый равен 0, иначе первый параметр.<br><br>
<center><code>IFZ(значение1, значение2)</code></center><br><br>
<b>Параметры:</b> число, любой тип.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>IFZ([число], '-')</code></center><br><br>
Функция является сокращенным вариантом функции IIF:<br><br>
<center><code>IIF([число]=0, '-', [число])</code></center>

[IFE]
4
Возвращает второй параметр, если первый - пустой текст, иначе - первый параметр.<br><br>
<center><code>IFE(значение1, значение2)</code></center><br><br>
<b>Параметры:</b> текст, любой тип.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>IFE([текст], '-')</code></center><br><br>
Функция является сокращенным вариантом функции IIF:<br><br>
<center><code>IIF([текст]='', '-', [текст])</code></center>

[TRIM]
0
Удаляет все начальные и конечные пробелы.<br><br>
<center><code>TRIM(текст)</code></center><br><br>
<b>Параметры:</b> текст.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>TRIM([текст])</code></center>

[AGE]
3
Рассчитывает возраст.<br><br>
<center><code>AGE(дата1, дата2, формат)</code></center><br><br>
<b>Параметры:</b> дата1, дата2, формат - число.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>AGE([начальная дата], [конечная дата], 3)</code></center><br><br>
Функция вернет, например 7 лет 9 месяцев 21 день. Третий параметр задает формат вывода: 1 - только год, 2 - год и месяц, 3 - день, месяц, год. Если какой-либо элемент равен 0, то он не отображается. При расчетах считается, что в месяце 30 дней. Отличается от функции PERIOD тем, что не прибавляет к числу дней единицу.

[ZEROS]
0
Добавляет впереди числа нули.<br><br>
<center><code>ZEROS(число, длина текста)</code></center><br><br>
<b>Параметры:</b> число, длина текста - число.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>ZEROS(4, 3)</code></center><br><br>
Результат: 004

[BLOCK]
4
Назначение функции - выполнить последовательность действий. Возвращает значение последнего параметра.<br><br>
<center><code>BLOCK(значение1, значение2, ..., значениеN)</code></center><br><br>
<b>Параметры:</b> значение - любой тип.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>BLOCK(SETVAR('var1', 10), SETVAR('var2', 20), GETVAR('var1') + GETVAR('var2'))</code></center><br><br>
На самом деле функция ничего не делает, кроме того, что возвращает значение последнего параметра. Просто используется механизм вычисления выражений, когда перед вызовом функции ее параметры вычисляются, а затем передаются в саму функцию. Внутри функции BLOCK обычно применяются такие функции-действия как SETVAR, SETFIELD и т. д. Например при помощи функций BLOCK и SETFIELD можно установить значение сразу нескольким полям. Применяя внутри BLOCK функцию SETVAR можно упростить выражения, разбивая сложное вычисление на части и сохраняя промежуточные результаты в переменных. Обратите внимание, что функция в любом случае будет вычислять все параметры, т. е. нельзя в каком-то месте прервать последовательность дейсвий.
<center><code>BLOCK(SETFIELD('Клиент', Null), SETFIELD('Дата', DATE), SETFIELD('Сумма', 0), Null)<br>
BLOCK(SETVAR('MaxDate', MAX('Оплаты', 'Дата')), MAXIF('Оплаты', 'Сумма', '[Дата]=GETVAR("MaxDate")'))</code></center>

[VAREXISTS]
4
Возвращает 1, если переменная существует, иначе 0.<br><br>
<center><code>VAREXISTS(имя переменной)</code></center><br><br>
<b>Параметры:</b> имя переменной - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>iif(varexists('my') = 1, setvar('my', getvar('my') + 1), setvar('my', 0))</code></center><br><br>
Переменные являются глобальными, т. е. доступны из любой формы или отчета. Название переменной не зависит от регистра.

[PATHLEN]
0
Возвращает длину пути. Путь представляет собой строку вида: Уровень1\Уровень2\...\УровеньN.<br><br>
<center><code>PATHLEN(путь)</code></center><br><br>
<b>Параметры:</b> путь - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>PATHLEN('Уровень1\Уровень2\Уровень3'), <b>Результат:</b> 3. PATHLEN('Уровень1') = 1, PATHLEN('')=0</code></center><br><br>
Функция  применяется для определения глубины вложенности иерархических групп.

[EXTRACTPATH]
0
Возвращает фрагмент пути. Путь представляет собой строку вида: Уровень1\Уровень2\...\УровеньN.<br><br>
<center><code>EXTRACTPATH(путь, начало, длина)</code></center><br><br>
<b>Параметры:</b> путь - текст, начало - число, длина - число.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>EXTRACTPATH('Уровень1\Уровень2\Уровень3\Уровень4', 2, 2)</code></center><br><br>
Результат: Уровень2\Уровень3. Функция применяется при использовании иерархических групп.

[NEWLINE]
0
Возвращает символы конца строки.<br><br>
<center><code>NEWLINE</code></center><br><br>
<b>Параметры:</b> нет.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>IIF([кол]=0, 'Количество' + NEWLINE + 'должно быть больше 0', '')</code></center><br><br>
Функция используется, когда текст надписи надо разбить на несколько строк.

[NEWREC]
7
Возвращает 1, если редактируется новая запись, иначе 0.<br><br>
<center><code>NEWREC</code></center><br><br>
<b>Параметры:</b> нет.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>IIF(NEWREC=1, 'Новая запись', '')</code></center><br><br>
Функция используется, когда некоторые вычисления нужно выполнять только в новой записи.

[GET]
7
Возвращает значение поля текущей записи запроса или таблицы.<br><br>
<center><code>GET(имя запроса/таблицы, имя поля)</code></center><br><br>
<b>Параметры:</b> имя запроса/таблицы - текст, имя поля - текст.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>GET('Запрос', 'Поле')</code></center><br><br>
Функция часто используется для доступа к полям запроса из выражения другого запроса или вычисляемого поля формы.<br><br>
Функцию также можно использовать для доступа к полям текущей формы.<br><br>
Если первый параметр - форма/таблица, то можно обращаться к полям объекта через вертикальную черту:<br><br>
<center><code>GET('Форма', 'Объект|Поле|...|Поле')</code></center>

[DBCOUNTD]
6
Вычисляет количество уникальных значений в поле формы.<br><br>
<center><code>DBCOUNTD(имя формы, имя поля, фильтр)</code></center><br><br>
<b>Параметры:</b> имя формы - текст, имя поля - текст, фильтр - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>DBCOUNTD('Заявки', 'Дата', '[!дата]<=[дата]')</code></center><br><br>
Функцию можно применять к любой форме базы данных. Является аналогом функции отбора "Количество уникальных". Функция не учитывает поля со значением NULL. В вычисления входят только те записи, которые удовлетворяют условиям фильтра. Синтаксис фильтра такой же как в <a href="https://wiki.mydataexpress.ru/rukovodstvo_po_polzovaniu_dx:otchjot#filtr_istochnika">фильтре источника</a>. 

[OLDVALUE]
7
Возвращает значение поля текущей формы до редактирования.<br><br>
<center><code>OLDVALUE(имя поля)</code></center><br><br>
<b>Параметры:</b> имя поля - текст.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>OLDVALUE('дата')</code></center>

[DBMERGE]
6
Соединяет значения поля в одну строку, разделяя значения точкой с запятой и пробелом.<br><br>
<center><code>DBMERGE(имя формы, имя поля, фильтр)</code></center><br><br>
<b>Параметры:</b> имя формы - текст, имя поля - текст, фильтр - текст.<br>
<b>Результат:</b> текст или NULL.<br><br>
<b>Пример:</b><br>
<center><code>DBMERGE('Заказы', 'Номер', '[!Клиент]=[Заказчик]')<br>
Результат: 3; 5; 12; 16</code></center><br><br>
Функцию можно применять к любой форме базы данных. Является аналогом функции отбора "Соединить". Результат функции не включает повторяющиеся значения. В результат входят только те записи, которые удовлетворяют условиям фильтра. Синтаксис фильтра такой же как в <a href="https://wiki.mydataexpress.ru/rukovodstvo_po_polzovaniu_dx:otchjot#filtr_istochnika">фильтре источника</a>. 

[DBMERGEALL]
6
Соединяет значения поля в одну строку, разделяя значения точкой с запятой и пробелом.<br><br>
<center><code>DBMERGEALL(имя формы, имя поля, фильтр)</code></center><br><br>
<b>Параметры:</b> имя формы - текст, имя поля - текст, фильтр - текст.<br>
<b>Результат:</b> текст или NULL.<br><br>
<b>Пример:</b><br>
<center><code>DBMERGEALL('Заказы', 'Номер', '[!Клиент]=[Заказчик]')<br>
Результат: 3; 3; 5; 12; 16; 16; 16</code></center><br><br>
В отличии от DBMERGE, в результат включаются все значения полей, в том числе повторяющиеся. Функцию можно применять к любой форме базы данных. Является аналогом функции отбора "Соединить все". В результат входят только те записи, которые удовлетворяют условиям фильтра. Синтаксис фильтра такой же как в <a href="https://wiki.mydataexpress.ru/rukovodstvo_po_polzovaniu_dx:otchjot#filtr_istochnika">фильтре источника</a>. 

[BEGINYEAR]
3
Возвращает начало года.<br><br>
<center><code>BEGINYEAR(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>BEGINYEAR(cdate('14.08.2016'))</code></center><br><br>
Результат: 01.01.2016

[BEGINMONTH]
3
Возвращает начало месяца.<br><br>
<center><code>BEGINMONTH(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>BEGINMONTH(cdate('14.08.2016'))</code></center><br><br>
Результат: 01.08.2016

[BEGINWEEK]
3
Возвращает начало недели.<br><br>
<center><code>BEGINWEEK(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>BEGINWEEK(cdate('14.08.2016'))</code></center><br><br>
Результат: 08.08.2016

[ENDYEAR]
3
Возвращает конец года.<br><br>
<center><code>ENDYEAR(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>ENDYEAR(cdate('14.08.2016'))</code></center><br><br>
Результат: 31.12.2016

[ENDMONTH]
3
Возвращает конец месяца.<br><br>
<center><code>ENDMONTH(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>ENDMONTH(cdate('14.08.2016'))</code></center><br><br>
Результат: 31.08.2016

[ENDWEEK]
3
Возвращает конец недели.<br><br>
<center><code>ENDWEEK(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>ENDWEEK(cdate('14.08.2016'))</code></center><br><br>
Результат: 14.08.2016

[BEGINQUARTER]
3
Возвращает начало квартала.<br><br>
<center><code>BEGINQUARTER(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>BEGINQUARTER(cdate('14.08.2016'))</code></center><br><br>
Результат: 01.07.2016

[ENDQUARTER]
3
Возвращает конец квартала.<br><br>
<center><code>ENDQUARTER(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> дата.<br><br>
<b>Пример:</b><br>
<center><code>ENDQUARTER(cdate('14.08.2016'))</code></center><br><br>
Результат: 30.09.2016

[QUARTEROF]
3
Возвращает номер квартала.<br><br>
<center><code>QUARTEROF(дата)</code></center><br><br>
<b>Параметры:</b> дата.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>QUARTEROF(cdate('14.08.2016'))</code></center><br><br>
Результат: 3

[DBUNIQUE]
6
Проверяет запись текущей формы на уникальность. Возвращает 1, если запись уникальна, или 0, в противном случае.<br><br>
<center><code>DBUNIQUE(список полей)</code></center><br><br>
<b>Параметры:</b> список полей - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>IIF(DBUNIQUE('фамилия;имя;отчество')=0, 'Такой человек уже есть в базе', '')</code></center><br><br>
Список полей - это названия полей, разделенные точкой с запятой. Данная функция в основном применяется при проверке значений, чтобы запретить дублирование записей. Текстовые поля проверяются без учета регистра, т. е. "Иванов" и "иВАноВ" одно и то же. Проверяются все записи формы в базе независимо от установленного фильтра или ограничений. <b>Не используйте эту функцию для проверки на уникальность в подчиненных формах.</b> Для этих целей используется функция UNIQUE.

[UNIQUE]
1
Проверяет записи подчиненной формы или запроса на уникальность. Возвращает 1, если среди записей нет повторений, или 0, в противном случае. Если функция нашла неуникальную запись, то курсор будет установлен на этой записи.<br><br>
<center><code>UNIQUE(имя формы или запроса, список полей)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, список полей - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>IIF(UNIQUE('товары', 'наименование товара;единица измерения')=0, 'Товар указан более одного раза', '')</code></center><br><br>
Список полей - это названия полей, разделенные точкой с запятой. Данная функция в основном применяется при проверке значений, чтобы запретить дублирование записей. Текстовые поля проверяются без учета регистра, т. е. "Иванов" и "иВАноВ" одно и то же. Проверяются только записи таблицы, подчиненные текущей родительской записи. <b>Проверка на уникальность данной функцией осуществляется уже после заполнения таблицы. Выражение должно находится не в таблице, а в родительской форме, например в поле итогов или надписи.</b>

[MSGBOX]
4
Показывает сообщение.<br><br>
<center><code>MSGBOX(заголовок, сообщение)</code></center><br><br>
<b>Параметры:</b> заголовок - текст, сообщение - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>MSGBOX('Отправка СМС', 'Сообщение доставлено успешно')</code></center><br><br>
Функция всегда возвращает 0.

[YESNOBOX]
4
Показывает сообщение с выбором ответа Да/Нет.<br><br>
<center><code>YESNOBOX(заголовок, сообщение)</code></center><br><br>
<b>Параметры:</b> заголовок - текст, сообщение - текст.<br>
<b>Результат:</b> число.<br><br>
<b>Пример:</b><br>
<center><code>IIF(YESNOBOX('Внимание!', 'Вы точно хотите загрузить эти данные?')=1, ..., ...)</code></center><br><br>
Возвращаемый результат: 1 - Да, 2 - Нет.

[YESNOCANCELBOX]
4
Показывает сообщение с выбором ответа Да/Нет/Отмена.<br><br>
<center><code>YESNOCANCELBOX(заголовок, сообщение)</code></center><br><br>
<b>Параметры:</b> заголовок - текст, сообщение - текст.<br>
<b>Результат:</b> число.<br><br>
Возвращаемый результат: 1 - Да, 2 - Нет, 3 - Отмена.

[SETFIELD]
7
Записывает в поле текущей формы значение.<br><br>
<center><code>SETFIELD(имя поля, значение)</code></center><br><br>
<b>Параметры:</b> имя поля - текст, значение - любой тип.<br>
<b>Результат:</b> любой тип.<br><br>
Если в качестве поля выступает файл или изображение, то значением поля должен быть полный путь к файлу, файл должен существовать. Функция не сработает, если запись не в режиме редактирования. Ограничения доступа к полю игнорируются. Изменение поля приведет к пересчету связанных полей. <b>Не пытайтесь изменить поле, изменение которого приведет к пересчету текущего поля (в котором выражение), потому что это приведет к зацикливанию.</b> Функция в основном используется в действии "Вызвать функцию".

[SETLABEL]
7
Устанавливает текст надписи.<br><br>
<center><code>SETLABEL(имя надписи, значение)</code></center><br><br>
<b>Параметры:</b> имя надписи - текст, значение - любой тип.<br>
<b>Результат:</b> любой тип.<br><br>
В качестве имени надписи используется исходный текст надписи в дизайнере. Возможно изменение надписей с выражениями. Изменение надписи НЕ (!) приведет к пересчетам в связанных надписях. Функция в основном используется в выражении команды "Вызвать функцию".

[EDITREC]
7
Проверяет находится ли текущая не новая запись в режиме редактирования.<br><br>
<center><code>EDITREC</code></center><br><br>
<b>Параметры:</b> нет.<br>
<b>Результат:</b> число.<br><br>
Возвращает 1, если запись в режиме редактирования, или 0, в противном случае. <b>Обратите внимание, что функция проверяет редактируется ли именно существующая запись.</b> Для проверки того, что редактируется ли новая запись используйте функицию NEWREC.

[MODIFIEDREC]
7
Проверяет была ли изменена запись.<br><br>
<center><code>MODIFIEDREC</code></center><br><br>
<b>Параметры:</b> нет.<br>
<b>Результат:</b> число.<br><br>
Возвращает 1, если запись изменена, или 0, в противном случае.

[PADEG_FIO]
8
Функция выполняет преобразование ФИО в заданный падеж.<br><br>
<center><code>PADEG_FIO(ФИО, род, падеж)</code></center><br><br>
<b>Параметры:</b> ФИО - текст, род - число, падеж - число.<br>
<b>Результат:</b> текст.<br><br>
Порядок следования составляющих ФИО – фамилия, имя, отчество.<br>
Род: 1 - мужской, 2 - женский, 0 - определяется автоматически по отчеству.<br>
Падеж: 1 - именительный, 2 - родительный, 3 - дательный, 4 - винительный, 5 - 
творительный, 6 - предложный.<br><br>
Допускается использование инициалов и сокращенных имени, отчества. Может выполнять 
преобразование имен типа китайских. Для корректной работы функции необходимо 
наличие трех компонент ФИО (имена китайского типа допускается задавать двумя словами). 
В ряде случаев правильно обрабатываются ФИО, записанные в формате "Фамилия Имя [Имя]". 
Кроме преобразования функция выполняет форматирование ФИО.<br><br>
<b>Примеры:</b><br>
<center><code>PADEG_FIO(''Иванов Иван Иванович'', 1, 2) - результат Иванова Ивана Ивановича<br>
PADEG_FIO(''Петров П. П.'', 1, 2) - результат Петров П.П.</code></center>

[PADEG_IF]
8
Функция предназначена для склонения пар "Имя Фамилия" (Марк Твен).<br><br>
<center><code>PADEG_IF(Имя Фамилия, род, падеж)</code></center><br><br>
<b>Параметры:</b> ФИО - текст, род - число, падеж - число.<br>
<b>Результат:</b> текст.<br><br>
Род: 1 - мужской, 2 - женский.<br>
Падеж: 1 - именительный, 2 - родительный, 3 - дательный, 4 - винительный, 
5 - творительный, 6 - предложный.<br><br>
Эта функция также пригодна для склонения имен собственных типа Джон Фиджеральд 
Кеннеди. При использовании данной функции следует иметь в виду, что фамилией 
считается последнее слово параметра, а все предыдущие – именами и склоняются 
соответствующим образом.<br><br>
<b>Пример:</b><br>
<center><code>PADEG_IF(''Марк Твен'', 1, 2)</code></center>

[PADEG_NOMINATIVE]
8
Функция выполняет восстановление именительного падежа для ФИО, заданного в произвольном падеже в формате "Фамилия Имя Отчество".<br><br>
<center><code>PADEG_NOMINATIVE(ФИО)</code></center><br><br>
<b>Параметры:</b> ФИО - текст.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>PADEG_NOMINATIVE(''Иванова Ивана Ивановича'')</code></center>

[PADEG_APPOINTMENT]
8
Функция предназначена для склонения наименования должностей.<br><br>
<center><code>PADEG_APPOINTMENT(должность, падеж)</code></center><br><br>
<b>Параметры:</b> должность - текст, падеж - число.<br>
<b>Результат:</b> текст.<br><br>
К сожалению, функция не позволяет выполнить склонение должностей типа: 
"Директор департамента – главный бухгалтер", являющихся, по сути, объединением 
двух должностей. В подобных случаях можно посоветовать выделить из исходной 
строки подстроки, соответствующие каждой должности, и передать их в качестве 
параметра приведенной функции. А после выполнения преобразования объединить 
результаты.<br><br>
<b>Пример:</b><br>
<center><code>PADEG_APPOINTMENT([Должность], 2)</code><center>

[PADEG_FULLAPPOINTMENT]
8
Функция позволяет получить полное наименование должности и выполнить 
его преобразование в заданный падеж.<br><br>
<center><code>PADEG_FULLAPPOINTMENT(должность, подразделение, падеж)</code></center><br><br>
<b>Параметры:</b> должность - текст, подразделение - текст, падеж - число.<br>
<b>Результат:</b> текст.<br><br>
При объединении удаляются повторяющиеся слова при их наличии. Например должность
– Начальник цеха; подразделение – Цех нестандартного оборудования; результат – 
Начальник цеха нестандартного оборудования. Все, сказанное выше в отношении 
составных должностей, справедливо и для данной функции.<br><br>
<b>Пример:</b><br>
<center><code>PADEG_FULLAPPOINTMENT([Должность], [Подразделение], 2)</code></center>

[PADEG_OFFICE]
8
Функция предназначена для склонения наименования подразделений, записанных 
одной строкой.<br><br>
<center><code>PADEG_OFFICE(подразделение, падеж)</code></center><br><br>
<b>Параметры:</b> подразделение - текст, падеж - число.<br>
<b>Результат:</b> текст.<br><br>
Кроме подразделений функция также может выполнять склонение и наименований 
предприятий.<br><br>
<b>Пример:</b><br>
<center><code>PADEG_OFFICE([Подразделение], 3)</code></center>

[PADEG_SEX]
8
Определяет род по отчеству, записанному в произвольном падеже.<br><br>
<center><code>PADEG_SEX(отчество)</code></center><br><br>
<b>Параметры:</b> отчество - текст.<br>
<b>Результат:</b> число.<br><br>
Возвращаемые значение: 1 - мужской, 2 - женский, 0 - неопределен.<br><br>
<b>Пример:</b><br>
<center><code>PADEG_SEX([Отчество])</code></center>

[PADEG_ID]
8
Определяет номер падежа в котором записано ФИО.<br><br>
<center><code>PADEG_ID(ФИО)</code></center><br><br>
<b>Параметры:</b> ФИО - текст.<br>
<b>Результат:</b> число.<br><br>
Возвращаемое значение от 1 до 6.<br><br>
<b>Пример:</b><br>
<center><code>PADEG_ID(''Ивановой Ольге Васильевне'')</code></center>

[PADEG_FIOBRIEF]
8
Аналогична функции PADEG_FIO, но возвращает ФИО в краткой форме: Иванов И.И.<br><br>
<center><code>PADEG_FIOBRIEF(ФИО, род, падеж)</code></center><br><br>
<b>Параметры:</b> ФИО - текст, род - число, падеж - число.<br>
<b>Результат:</b> текст.

[PADEG_IOFBRIEF]
8
Аналогична функции PADEG_FIO, но возвращает ФИО в краткой форме, 
причем инициалы идут впереди: И.И. Иванов.<br><br>
<center><code>PADEG_IOFBRIEF(ФИО, род, падеж)</code></center><br><br>
<b>Параметры:</b> ФИО - текст, род - число, падеж - число.<br>
<b>Результат:</b> текст.

[PADEG_F]
8
Извлекает из ФИО фамилию.<br><br>
<center><code>PADEG_F(ФИО)</code></center><br><br>
<b>Параметры:</b> ФИО - текст.<br>
<b>Результат:</b> текст.

[PADEG_I]
8
Извлекает из ФИО имя.<br><br>
<center><code>PADEG_I(ФИО)</code></center><br><br>
<b>Параметры:</b> ФИО - текст.<br>
<b>Результат:</b> текст.

[PADEG_O]
8
Извлекает из ФИО отчество.<br><br>
<center><code>PADEG_O(ФИО)</code></center><br><br>
<b>Параметры:</b> ФИО - текст.<br>
<b>Результат:</b> текст.

[RESULT]
4
Функция возвращает результат выполнения действия. Применяется только в редакторе действий.<br><br>
<b>Параметры:</b> нет.<br>
<b>Результат:</b> любой тип.

[CONCAT]
0
Функция соединяет параметры разных типов в одну строку, ведущие и конечные пробелы обрезаются, значения NULL преобразуются в пустой текст ''.<br><br>
<b>Параметры:</b> значение1 - любой тип, значение2, ..., значениеN.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>
CONCAT('Стоимость равна ', [сумма], ' руб.')<br>
CONCAT([Фамилия], ' ', [Имя], ' ', [Отчество])
</code></center>

[FNUMBER]
0
Округляет число до указанных знаков, дополняя нулями. Число округляется по математическим правилам. 
Функция - аналог ROUNDTO, но дополнительно группирует цифры по классам.<br><br>
<center><code>FNUMBER(число, число знаков после запятой)</code></center><br><br>
<b>Параметры:</b> число, точность - число.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>FNUMBER(2340.69, 2)</code></center><br><br>
Результат: 2 340.70

[TEXT]
0
Функция вычисляет поля и выражения, указанные прямо в тексте, и возвращает результирующий текст. Поля
указываются в квадратных скобках, а выражения - в фигурных скобках.<br><br>
<center><code>TEXT(текст)</code></center><br><br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<code>TEXT('[Клиент|Наименование], именуемое в дальнейшем [Клиент_Статус], в лице {PADEG_APPOINTMENT([Клиент|Должность руководителя], 2)} {PADEG_FIO([Клиент|ФИО Руководителя], 0, 2)}, действующего на основании [Клиент|Основание], с одной стороны, и [Организация|Наименование], именуемое в дальнейшем [Организация_Статус], в лице [Организация|Должность руководителя], действующего на основании [Организация|Основание], с другой стороны, заключили настоящий договор о нижеследующем:')</code><br><br>
Важные замечания:<br>
<ol>
<li>Символы [ и { распознаются соответственно как поле и выражение, а символ } - как конец выражения. Если вам нужен просто символ, продублируйте его: [[ {{ }}. Однако, внутри выражения символ { дублировать уже не надо. Также и символ } вне выражения дублировать не надо.</li>
<li>Текст можно переносить. Символы новой строки в тексте будут преобразованы в пробел. В имени поля и в выражении символы новой строки не обрабатываются. Следовательно, имя поля должно быть на одной строке, а выражение переносить можно, но учитывайте символы новой строки.</li>
<li>Имена полей и выражения внутри текста не проверяются редактором выражений. Сообщение об ошибке вы получите во время вычисления выражения.</li>
</ol>

[TIMESTAMP]
5
Функция возвращает число секунд, прошедших с 30.12.1899 00:00:00 по указанные дату и время.<br><br>
<center><code>TIMESTAMP(дата, время)</code></center><br><br>
<b>Результат:</b> число.<br><br>
Если первый параметр равен NULL, то будет подставлена дата 30.12.1899. Если второй параметр равен NULL, то будет подставлено время 00:00:00. Если оба параметра равны NULL, то результат функции тоже будет равен NULL. Функция используется при фильтрации запросов по дате и времени. 

[MERGEX]
1
Функция вычисляет выражение для каждой записи подчиненной формы или запроса и соединяет результаты в одну строку, разделяя полученные значения разделителем.<br><br>
<center><code>MERGEX(имя формы/запроса, выражение, разделитель)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, выражение - текст, разделитель - текст.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>MERGEX('Поступивший товар', '[товар|название] + " = " + [цена]', '; ')</code></center><br><br>
Выражение вычисляется в контексте формы или запроса, указанного в первом параметре. Функция соединяет все результаты выражения, кроме NULL. Даже если в форме или запросе нет ни одной записи функция вернет пустую строку: ''.<br><br>
Функция является расширенной версией функции MERGE и способна соединять в одну строку несколько полей.<br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[TAKE]
1
Извлекает из подчиненной формы или запроса значение поля по условию.<br><br>
<center><code>TAKE(имя формы/запроса, имя поля, условие)</code></center><br><br>
<b>Параметры:</b> имя формы/запроса - текст, имя поля - текст, условие - текст.<br>
<b>Результат:</b> любой тип.<br><br>
<b>Пример:</b><br>
<center><code>TAKE('Контакты', 'Телефон', 'RECNO("Контакты")=1')</code></center><br><br>
В примере функция возвращает номер телефона первой записи подчиненной формы "Контакты".<br><br>
Третий параметр представляет собой логическое выражение, которое вычисляется в контексте формы (запроса), указанной в первом параметре. Функция возвращает первое значение, удовлетворяющее условию. Если условие не указано, то функция вернет значение первой записи.<br><br>
Допускается передавать в функцию имя текущей формы, в том числе родительской формы, но при вызове функции форма не должна быть в режиме редактирования - иначе получите сообщение об ошибке.

[CASEOF]
4
Возвращает результат справа от знака "=", если искомое значение совпадает со значением слева от знака "=".<br><br>
<center><code>CASEOF(Искомое значение, 'Значение 1=Результат 1;Значение 2=Результат 2;...;Значение N=Результат N')</code></center><br><br>
<b>Параметры:</b> Искомое значение - любой тип, Список значений - текст<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>CASEOF([Месяц], 'Январь=01.01.2021;Февраль=01.02.2021;Март=01.03.2021')</code></center><br><br>
Список значений представляет собой пары "Значение=Результат", разделяемые точкой с запятой. Значение и результат не должны содержать в себе знаков "=" и ";".<br><br>
Поиск ведется независимо от регистра. Если искомое значение не найдено, то функция возвращает пустой текст (т. е. '').

[MONEYTOWORDS]
9
Функция склонения числового значения валюты в указанный падеж.<br><br>
<center><code>MONEYTOWORDS(число, валюта, падеж, формат)</code></center><br><br>
<b>Параметры:</b> число, валюта - текст, падеж - число, формат - число.</br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>MONEYTOWORDS([сумма], 'RUB', 2, 1)</code></center><br><br>
Допустимые значения валюты: RUB, USD, EUR.<br><br>
Допустимые значения падежа: 1 - именительный, ... 6 - предложный;<br><br>
При указании формата от 0 до 3, результат будет возвращаться в следующем виде:<br>
0 - 123 российских рубля 32 копейки;<br>
1 - 123 (сто двадцать три) российских рубля 32 копейки;<br>
2 - (сто двадцать три) российских рубля 32 копейки;<br>
3 - сто двадцать три российских рубля 32 копейки.<br><br>
Согласно бухгалтерским требованиям копейки (и любые другие сотые части основной валюты) не преобразуются.

[NUMTOWORDS]
9
Функция преобразования числа в его строковый эквивалент (число прописью).<br><br>
<center><code>NUMTOWORDS(число, род, формат)</code></center><br><br>
<b>Параметры:</b>число, род - число, формат - число.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>NUMTOWORDS([сумма], 1, 1)</code></center><br><br>
Род может принимать следующие значения: 0 - средний, 1 - мужской, 2 - женский.<br><br>
Формат может принимать 2 значения: 0 - возвращать дрообную часть цифрами, 1 - прописью.

[NUMPADEG]
9
Функция склонения числа прописью, возвращаемого функциями NUMTOWORDS, FRACTOWORDS, в указанный падеж.<br><br>
<center><code>NUMPADEG(число прописью, падеж, род, порядковое, одушевленное)</code></center><br><br>
<b>Параметры:</b> число прописью - текст, падеж - число, род - число, порядковое - число, одушевленное - число.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>NUMPADEG('сто двадцать пять и пять десятых', 2, 1, 0, 0)</code></center><br><br>
Падеж принимает следующие значения: 1 - именительный, ... 6 - предложный.<br><br>
Род принимает следующие значения: 0 - средний, 1 - мужской, 2 - женский.<br><br>
Порядковое принимает следующие значения: 0 - количественное, 1 - порядковое (дробная часть не возвращается).<br><br>
Одушевленное принимает следующие значения: 0 - неодушевленное, 1 - одушевленное.

[FRACTOWORDS]
9
Функция преобразования числа в строковый эквивалент (число прописью).<br><br>
<center><code>FRACTOWORDS(число)</code></center><br><br>
<b>Параметры:</b> число.<br>
<b>Результат:</b> текст.<br><br>
<b>Пример:</b><br>
<center><code>FRACTOWORDS([сумма])</code></center><br><br>
В отличии от функции NUMTOWORDS, при преобразовании будет указаны слова "целые", "целых".

[TYPEDTEXT]
4
Возвращает набираемый в объекте текст. Используется в связке объект-запрос, когда запрос используется в качестве источника списка. И запрос в режиме SQL.
Функция используется для реализации поиска текста по введенным фрагментам.<br><br>
<center><code>TYPEDTEXT(индекс)</code></center><br><br>
<b>Параметры:</b> индекс - число.<br>
<b>Результат:</b> текст или NULL<br><br>
Если индекс равен 0, то возвращается весь текст. Если больше 0, то фрагмент по порядку. Фрагменты разделяются пробелами. Количество пробелов между фрагментами значения не имеет. Если пользователь ничего не ввел или фрагмента с заданным индексом не существует, то возвращается NULL. 

[ISWEB]
4
Функция возвращает истину, если пользователь работает с базой данных в браузере. Если пользователь использует десктопное приложение, функция возвращает ложь.<br><br>
<center><code>ISWEB</code></center><br><br>
Функция не имеет параметров.

[ISSERVICE]
4
Функция возвращает истину, если веб-сервер работает в режиме сервиса. В десктоп-версии всегда возвращается ложь.<br><br>
<center><code>ISSERVICE</code></center><br><br>
Функция не имеет параметров.

[ENCODEDATE]
3
Функция возвращает дату из переданных значений года, месяца и дня.
<center><code>ENCODEDATE(год, месяц, день)</code></center><br><br>
<b>Параметры:</b> год - число, месяц - число, день - число.<br>
<b>Результат:</b> дата<br><br>
<b>Пример:</b><br>
<center><code>ENCODEDATE(2024, 12, 31)</code></center><br><br>

[ENCODETIME]
5
Функция возвращает время из переданных значений часов, минут и секунд.
<center><code>ENCODETIME(часы, минуты, секунды)</code></center><br><br>
<b>Параметры:</b> часы - число, минуты - число, секунды - число.<br>
<b>Результат:</b> время<br><br>
<b>Пример:</b><br>
<center><code>ENCODETIME(12, 5, 0)</code></center><br><br>
